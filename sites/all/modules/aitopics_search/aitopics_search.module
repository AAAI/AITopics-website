<?php

/**
 * Build the documents before sending them to Solr.
 *
 * Supports all types of
 * hook_apachesolr_index_document_build_' . $entity_type($documents[$id], $entity, $env_id);
 *
 * The function is the follow-up for apachesolr_update_index but then for
 * specific entity types
 *
 * @param $document
 * @param $entity
 * @param $entity_type
 */
function aitopics_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {

  if(array_key_exists('und', $entity->field_representative_image)) {
    $document->addField('ss_field_representative_image',
      json_encode($entity->field_representative_image['und'][0]));
  } else {
    $document->addField('ss_field_representative_image', "");
  }

  if($entity->type == 'item' && array_key_exists('und', $entity->field_source)) {
    $document->addField('tos_field_source', $entity->field_source['und'][0]['value']);
  } else {
    $document->addField('tos_field_source', "");
  }

  if($entity->type == 'item' && array_key_exists('und', $entity->field_authors)) {
    $document->addField('tos_field_authors', $entity->field_authors['und'][0]['value']);
  } else {
    $document->addField('tos_field_authors', "");
  }

}

/**
 * Prepare the query by adding parameters, sorts, etc.
 *
 * This hook is invoked before the query is cached. The cached query is used
 * after the search such as for building facet and sort blocks, so parameters
 * added during this hook may be visible to end users.
 *
 * This is otherwise the same as HOOK_apachesolr_query_alter(), but runs before
 * it.
 *
 * @param object $query
 *  An object implementing DrupalSolrQueryInterface. No need for &.
 */
function aitopics_search_apachesolr_query_prepare($query) {
  $query->addParams(array('fl' => 'ss_field_representative_image'));
  $query->addParams(array('fl' => 'im_field_topics'));
  $query->addParams(array('fl' => 'im_field_tags'));
  $query->addParams(array('fl' => 'tos_field_authors'));
  $query->addParams(array('fl' => 'tos_field_source'));
  $query->addParams(array('fl' => 'sm_vid_Collections'));
  $query->addParams(array('fl' => 'sm_vid_Item_Type'));
  $query->addParams(array('fl' => 'its_field_minutes'));
  $query->addParams(array('fl' => 'its_field_publication_year_int'));
  $query->addParams(array('fl' => 'dm_field_publication_date'));
  $query->addParams(array('hl.fl' => 'content'));
  $query->addParams(array('hl.fl' => 'tos_field_source'));
  $query->addParams(array('hl.fl' => 'tos_field_authors'));
}


function _aitopics_search_is_paged() {
  return preg_match("/\?page=[^0]/", $_SERVER['REQUEST_URI']);
}

function _aitopics_search_get_query() {
  preg_match("/\/search\/site\/([^\?]*)/", $_SERVER['REQUEST_URI'], $m);
  if(count($m) > 1) {
    $search_query = urldecode($m[1]);
    if(empty($search_query)) {
      preg_match("/\/search\/site\/([^\?]*)/", $_SERVER['HTTP_REFERER'], $m);
      $search_query = urldecode($m[1]);
    }
    $search_query_words = array();
    preg_match_all('/("[^"]+"|[\w]+)/', $search_query, $matches);
    foreach($matches as $match_array) {
      foreach($match_array as $match) {
        $match = preg_replace('/"/', "", $match);
        if($match != "") {
          array_push($search_query_words, $match);
        }
      }
    }
    $search_query_words = array_unique($search_query_words);
    return $search_query_words;
  }
  return array();
}

function _aitopics_search_match_redirects($search_query_words) {
  $redirects = array();

  $search_str = implode(" ", $search_query_words);

  if(FALSE !== strpos($search_str, "video")) {
    array_push($redirects, l("Videos", "videos"));
  }
  if(FALSE !== strpos($search_str, "podcast") ||
    FALSE !== strpos($search_str, "audio")) {
    array_push($redirects, l("Podcasts", "podcasts"));
  }
  if(FALSE !== strpos($search_str, "news")) {
    array_push($redirects, l("AI in the News", "news"));
  }
  if(FALSE !== strpos($search_str, "classic")) {
    array_push($redirects, l("Classic publications", "classics"));
  }
  if(FALSE !== strpos($search_str, "publication")) {
    array_push($redirects, l("Classic publications", "classics"));
  }
  if(FALSE !== strpos($search_str, "contact") || FALSE !== strpos($search_str, "feedback")) {
    array_push($redirects, l("Contact us", "contact"));
  }
  if(FALSE !== strpos($search_str, "login")) {
    array_push($redirects, l("Editor login", "user/login"));
  }
  if(FALSE !== strpos($search_str, "faq")) {
    array_push($redirects, l("FAQs", "misc/faqs"));
  }
  if(FALSE !== strpos($search_str, "aitopics") || FALSE !== strpos($search_str, "about")) {
    array_push($redirects, l("About Us", "misc/about-us"));
  }
  if(FALSE !== strpos($search_str, "privacy")) {
    array_push($redirects, l("Privacy & Terms for AITopics", "misc/privacy-terms"));
  }
  if(FALSE !== strpos($search_str, "sitemap")
    || FALSE !== strpos($search_str, "site map")
    || FALSE !== strpos($search_str, "index")) {
    array_push($redirects, l("Sitemap", "sitemap"));
  }

  asort($redirects);
  return $redirects;
}

function aitopics_search_views_query_alter(&$view, &$query) {
  if($view->name == 'search_views') {
    $search_query_words = _aitopics_search_get_query();

    foreach($query->where as &$condition_group) {
      foreach($condition_group['conditions'] as &$condition) {
        if(is_object($condition['field'])) {
          $conds = $condition['field']->conditions();

          foreach(array(
              '***AUTHORS***' => 'field_data_field_authors.field_authors_value',
              '***TITLE***' => 'node.title',
              '***COMBINED***' => "CONCAT_WS(' ', field_data_field_authors.field_authors_value, node.title)")
            as $match => $field) {

            if($conds[0]['value'] == '%'.$match.'%') {
              $condition['field'] = new DatabaseCondition("AND");
              foreach($search_query_words as $search_query_word) {
                $condition['field']->condition($field, '[[:<:]]'.preg_quote($search_query_word).'[[:>:]]', 'REGEXP');
              }
            }
            if(is_array($conds[0]['value']) && $conds[0]['value'][':views_combine'] == '%'.$match.'%') {
              $condition['field'] = new DatabaseCondition("AND");
              foreach($search_query_words as $search_query_word) {
                $condition['field']->condition($field.' REGEXP :views_combine', array(':views_combine' => '[[:<:]]'.preg_quote($search_query_word).'[[:>:]]'), '');
              }
            }
          }
        }
      }
    }
  }
}

function aitopics_search_apachesolr_search_page_alter(&$build) {
  $search_query_words = _aitopics_search_get_query();
  $redirects = _aitopics_search_match_redirects($search_query_words);
  $topics = "";
  $title_authors = "";

  /* if(!_aitopics_search_is_paged()) { */

  /*   $view = views_get_view('search_views'); */
  /*   $topics = $view->preview('topics'); */

  /*   $view = views_get_view('search_views'); */
  /*   $title_authors = $view->preview('title_authors'); */

  /*   foreach($search_query_words as $query_word) { */
  /*     $term = strtoupper(preg_quote($query_word)); */
  /*     preg_match_all('/(<td class="views-field views-field-(field-)?(title|author)[^>]+)(.*?)<\/td>/s', $title_authors, $matches); */
  /*     foreach($matches[0] as $match) { */
  /*       $emboldened = preg_replace("/(\W)$term(\W)/i", '\1<strong>'.$term.'</strong>\2', $match); */
  /*       $emboldened = preg_replace("/(<a.*?href=\"[^\"]*?)<strong>($term)<\/strong>([^\"]*?\")/is", '${1}'.strtolower($term).'${3}', $emboldened); */
  /*       $title_authors = str_replace($match, $emboldened, $title_authors); */
  /*     } */
  /*   } */
  /* } */

  if(array_key_exists('#markup', $build['search_results'])) {
    $solr_results = array();
  } else {
    $solr_results = $build['search_results']['#results'];
  }

  $build['search_results'] = array(
    '#theme' => 'aitopics_search_test',
    '#search_query_words' => $search_query_words,
    '#query' => implode(" AND ", $search_query_words),
    '#custom_results' => array(
      'redirects' => $redirects,
      'topics' => $topics,
      'title_authors' => $title_authors),
    '#solr_results' => $solr_results);
}

function aitopics_search_theme() {
  return array(
    'aitopics_search_test' => array(
      'template' => 'aitopics_search_results',
      'variables' => array(
        'search_query_words' => NULL, 'query' => NULL,
        'custom_results' => NULL, 'solr_results' => NULL
        ),
      ),
    );
}


