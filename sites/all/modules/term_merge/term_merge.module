<?php

/**
 * @file
 * Provide functionality for merging taxonomy terms one into another.
 */

/**
 * Constant denotes "do not create HTTP redirect" logic for term merge action.
 */
define('TERM_MERGE_NO_REDIRECT', -1);

/**
 * Constant denotes "Create a new term and use it as the term trunk" logic
 * for term merge action.
 */
define('TERM_MERGE_NEW_TERM_TRUNK', -1);

/**
 * Implements hook_menu().
 */
function term_merge_menu() {
  $items = array();

  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/merge'] = array(
    'title' => 'Merge terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_merge_form', 3),
    'access arguments' => array('merge terms'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['taxonomy/term/%taxonomy_term/merge'] = array(
    'title' => 'Merge terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_merge_form', NULL, 2),
    'access arguments' => array('merge terms'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['term-merge/autocomplete/term-trunk/%taxonomy_vocabulary_machine_name'] = array(
    'title' => 'Autocomplete Term Merge form term trunk',
    'page callback' => 'term_merge_form_term_trunk_widget_autocomplete_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('merge terms'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function term_merge_admin_paths() {
  return array(
    'taxonomy/term/*/merge' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function term_merge_permission() {
  return array(
    'merge terms' => array(
      'title' => t('Merge terms'),
      'description' => t('Gives the ability to merge taxonomy terms.'),
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function term_merge_action_info() {
  return array(
    'term_merge_action' => array(
      'type' => 'taxonomy',
      'label' => t('Merge term'),
      'configurable' => TRUE,
      'behavior' => array('changes_property'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function term_merge_help($path, $arg) {
  switch ($path) {
    // Main module help for the Term Merge module.
    case 'admin/help#term_merge':
      return '<p>' . t('Allows you to merge multiple terms into one and and at the same time update all fields referencing to the old ones.') . '</p>';
      break;
  }
}

/**
 * Generate the configuration form for action "Term merge".
 */
function term_merge_action_form($context) {
  $form = array();

  $form['displaimer'] = array(
    '#markup' => '<b>' . t('Sorry, currently Term Merge action is not supported via user interface. Please, contact the maintainers at the official website if you need it enabled via user interface.') . '</b>',
  );

  return $form;
}

/**
 * Form submission function.
 *
 * Store information about configurable action.
 */
function term_merge_action_submit($form, &$form_state) {
  // We don't have enabled UI for this action. It's just a dummy function.
  return array();
}

/**
 * Action function. Perform action "Term Merge".
 */
function term_merge_action($object, $context) {
  $term_branch = $object;
  $term_trunk = taxonomy_term_load($context['term_trunk']);
  $vocabulary = taxonomy_vocabulary_load($term_branch->vid);

  $_term_branch_children = taxonomy_get_tree($term_branch->vid, $term_branch->tid);
  $term_branch_children = array();
  foreach ($_term_branch_children as $term) {
    $term_branch_children[] = $term->tid;
  }

  if ($term_branch->vid != $term_trunk->vid) {
    watchdog('term_merge', 'Trying to merge 2 terms (%term_branch, %term_trunk) from different vocabularies', array('%term_branch' => $term_branch->name, '%term_trunk' => $term_trunk->name), WATCHDOG_WARNING);
    return;
  }
  if ($term_branch->tid == $term_trunk->tid) {
    watchdog('term_merge', 'Trying to merge a term %term into itself.', array('%term' => $term_branch->name), WATCHDOG_WARNING);
    return;
  }
  if (in_array($term_trunk->tid, $term_branch_children)) {
    watchdog('term_merge', 'Trying to merge a term %term_branch into its child %term_trunk.', array('%term_branch' => $term_branch->name, '%term_trunk' => $term_trunk->name), WATCHDOG_WARNING);
    return;
  }

  // Defining some default values.
  if (!isset($context['merge_fields'])) {
    // It's easier to delete extra values if you forgot to specify this
    // parameter, rather than search for your DB back up. So by defualt we merge
    // field values.
    $context['merge_fields'] = TRUE;
  }
  if (!isset($context['term_branch_keep'])) {
    // It's easier to manually delete the unwanted terms, rather than
    // search for your DB back up. So by default we keep the term branch.
    $context['term_branch_keep'] = TRUE;
  }
  if (!isset($context['redirect']) || !module_exists('redirect')) {
    // This behavior requires Redirect module installed.
    $context['redirect'] = TERM_MERGE_NO_REDIRECT;
  }

  if ($context['merge_fields']) {
    // "Merging" the fields from $term_branch into $term_trunk where it's
    // possible.
    $bundle = field_extract_bundle('taxonomy_term', $vocabulary);
    $instances = field_info_instances('taxonomy_term', $bundle);

    foreach ($instances as $instance) {
      // Getting the list of available languages for this field.
      $languages = array();
      if (is_array($term_trunk->$instance['field_name'])) {
        $languages = array_merge($languages, array_keys($term_trunk->$instance['field_name']));
      }
      if (is_array($term_branch->$instance['field_name'])) {
        $languages = array_merge($languages, array_keys($term_branch->$instance['field_name']));
      }
      $languages = array_unique($languages);
      // Merging the data of both terms into $term_trunk.
      foreach ($languages as $language) {
        if (!isset($term_trunk->{$instance['field_name']}[$language])) {
          $term_trunk->{$instance['field_name']}[$language] = array();
        }
        if (!isset($term_branch->{$instance['field_name']}[$language])) {
          $term_branch->{$instance['field_name']}[$language] = array();
        }
        $term_trunk->{$instance['field_name']}[$language] = array_merge($term_trunk->{$instance['field_name']}[$language], $term_branch->{$instance['field_name']}[$language]);
      }
    }

    // And now we can save $term_trunk after shifting all the fields from
    // $term_branch.
    taxonomy_term_save($term_trunk);
  }

  // Updating all the links to $term_branch to point now to $term_trunk
  // firstly we go through the list of all fields searching for
  // taxonomy_term_reference type because potentially some of these fields
  // values will have to be updated after merging terms.
  $fields = field_info_fields();
  $result = array();
  foreach ($fields as $k => $v) {
    // Additionally we group by field_name to know what field has to be updated
    // in each found entity.
    // @todo: Here would be nice to throw in a hook, allowing other modules to
    // supply meta data about their field types if they also use taxonomy
    // references, defining it in their own field types.
    if ($v['type'] == 'taxonomy_term_reference') {
      $result[$k] = array();
      $query = new EntityFieldQuery();
      // Making sure we search in the entire scope of entities.
      $query->addMetaData('account', user_load(1));
      $query->fieldCondition($v['field_name'], 'tid', $term_branch->tid);
      $_result = $query->execute();
      $result[$k] = array_merge_recursive($result[$k], $_result);
    }
  }
  // Now we load all entities that have taxonomy_term_reference pointing to
  // $term_branch.
  foreach ($result as $field_name => $entity_types) {
    foreach ($entity_types as $entity_type => $v) {
      $ids = array_keys($v);
      $entities = entity_load($entity_type, $ids);
      // After we have loaded it, we alter the taxonomy_term_reference
      // to point to $term_trunk.
      foreach ($entities as $entity) {
        // What is more, we have to do it for every available language.
        foreach ($entity->$field_name as $language => $items) {
          foreach ($entity->{$field_name}[$language] as $delta => $item) {
            if ($item['tid'] == $term_branch->tid) {
              $entity->{$field_name}[$language][$delta]['tid'] = $term_trunk->tid;
            }
          }
        }
        // After updating all the references, save the entity.
        entity_save($entity_type, $entity);
      }
    }
  }

  // It turned out we gotta go tricky with the Redirect module. If we create
  // redirection before deleting the branch term (if we are instructed to delete
  // in this action) redirect module will do its "auto-clean up" in
  // hook_entity_delete() and will delete our just created redirects. But at the
  // same time we have to get the path alias of the $term_branch before it gets
  // deleted. Otherwise the path alias will be deleted along with the term
  // itself.
  $redirect_paths = array();
  if ($context['redirect'] != TERM_MERGE_NO_REDIRECT) {
    // Creating HTTP redirect from term branch to the term trunk. We redirect
    // standard taxonomy/term/% path and optionally, if path alias is set, we
    // redirect from branch term path alias to the trunk term too.
    $alias = drupal_get_path_alias('taxonomy/term/' . $term_branch->tid);
    $redirect_paths[] = 'taxonomy/term/' . $term_branch->tid;
    if (!in_array($alias, $redirect_paths)) {
      $redirect_paths[] = $alias;
    }
  }

  if (!$context['term_branch_keep']) {
    // If we are going to delete branch term, we need firstly to make sure
    // all its children now have the parent of term_trunk.
    foreach (taxonomy_get_children($term_branch->tid, $vocabulary->vid) as $child) {
      $parents = taxonomy_get_parents($child->tid);
      // Deleting the parental link to the term that is being merged.
      unset($parents[$term_branch->tid]);
      // And putting the parental link to the term that we merge into.
      $parents[$term_trunk->tid] = $term_trunk;
      $parents = array_unique(array_keys($parents));
      $child->parent = $parents;
      taxonomy_term_save($child);
    }
    // We are instructed to delete the term branch after the merge,
    // and so we do.
    taxonomy_term_delete($term_branch->tid);
  }

  // Here we do the 2nd part of integraiton with the Redirect module. Once the
  // branch term has been deleted (if deleted), we can add the redirects
  // without being afraid that the redirect module will delete them in its
  // hook_entity_delete().
  foreach ($redirect_paths as $v) {
    $redirect = new stdClass();
    redirect_object_prepare($redirect, array(
      'source' => $v,
      'redirect' => drupal_get_path_alias('taxonomy/term/' . $term_trunk->tid),
      'status_code' => $context['redirect'],
    ));
    redirect_save($redirect);
  }

  watchdog('term_merge', 'Successfully merged term %term_branch into term %term_trunk in vocabulary %vocabulary. Context: @context', array(
    '%term_branch' => $term_branch->name,
    '%term_trunk' => $term_trunk->name,
    '%vocabulary' => $vocabulary->name,
    '@context' => var_export($context, 1),
  ));
}

/**
 *  Menu callback.
 *
 *  Allow user to specify which terms to be merged into which term and any
 *    other settings needed for term merge action.
 *
 * @param object $vocabulary
 *   Fully loaded taxonomy vocabulary object
 * @param object $term
 *   Fully loaded taxonomy term object that should be selected as the default
 *     merge term in the form. If the $vocabulary is omitted, the vocabulary of
 *     $term is considered
 *
 * @return array
 *   Array of the form
 */
function term_merge_form($form, $form_state, $vocabulary = NULL, $term = NULL) {
  // If there are more than this many terms in the vocabulary the default
  // widget for term trunk field becomes autocomplete textfield instead of a
  // select.
  $term_trunk_widget_autocomplete_threshold = 100;

  if (is_null($vocabulary)) {
    $vocabulary = taxonomy_vocabulary_load($term->vid);
  }

  // It's always handy to have the vocabulary by hand.
  $form['#vocabulary'] = $vocabulary;

  if (!isset($form_state['storage']['confirm'])) {
    // We are at the set up step.
    $tree = taxonomy_get_tree($vocabulary->vid);
    $options = array();
    foreach ($tree as $k => $v) {
      $options[$v->tid] = str_repeat('-', $v->depth) . $v->name;
      // Additionally we key the $tree by term->tid.
      unset($tree[$k]);
      $tree[$v->tid] = $v;
    }
    $term_branch_value = is_null($term) ? NULL : array($term->tid);
    $form['term_branch'] = array(
      '#type' => 'select',
      '#title' => t('Terms to Merge'),
      '#required' => TRUE,
      '#description' => t('Please, choose the terms you want to merge into another term.'),
      '#multiple' => TRUE,
      '#options' => $options,
      '#ajax' => array(
        'callback' => 'term_merge_form_term_trunk',
        'wrapper' => 'term-merge-form-term-trunk',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#default_value' => $term_branch_value,
      '#size' => 8,
    );

    $form['term_trunk'] = array(
      '#type' => 'fieldset',
      '#title' => t('Merge Into'),
      '#prefix' => '<div id="term-merge-form-term-trunk">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );

    // Array of currently available widgets for choosing term trunk.
    $term_trunk_widget_options = array(
      'autocomplete' => 'Autocomplete',
      'select' => 'Select',
    );

    $term_trunk_widget = count($tree) > $term_trunk_widget_autocomplete_threshold ? 'autocomplete' : 'select';
    // Override the term trunk widget if settings are found in $form_state.
    if (isset($form_state['values']['term_trunk']['widget']) && in_array($form_state['values']['term_trunk']['widget'], array_keys($term_trunk_widget_options))) {
      $term_trunk_widget = $form_state['values']['term_trunk']['widget'];
    }

    $form['term_trunk']['widget'] = array(
      '#type' => 'radios',
      '#title' => t('Widget'),
      '#required' => TRUE,
      '#options' => $term_trunk_widget_options,
      '#default_value' => $term_trunk_widget,
      '#description' => t('Please, choose what widget you prefer for entering the term trunk. Note, in autocomplete widget you will not have an option for creating a new term and then it using as the term trunk.'),
      '#ajax' => array(
        'callback' => 'term_merge_form_term_trunk',
        'wrapper' => 'term-merge-form-term-trunk',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    // @todo:
    // There is a known bug, if user has selected something in one widget, and
    // then changes the widget, $form_states['values'] will hold the value for
    // term trunk form element in the format that is used in one widget, while
    // this value will be passed to another widget. This triggers different
    // unpleasant effects like showing tid instead of term's name or vice-versa.
    // I think we should just empty $form_state['values'] for the term trunk
    // form element when widget changes. Better ideas are welcome!
    switch ($term_trunk_widget) {
      case 'select':
        term_merge_form_term_trunk_widget_select($form, $form_state, $vocabulary);
        break;

      case 'autocomplete':
        term_merge_form_term_trunk_widget_autocomplete($form, $form_state, $vocabulary);
        break;
    }
    // Ensuring the Merge Into form element has the same title no matter what
    // widget has been used.
    $form['term_trunk']['tid']['#title'] = t('Merge into');

    $form['term_branch_keep'] = array(
      '#type' => 'checkbox',
      '#title' => t('Only merge occurrences'),
      '#description' => t('Check this if you want to only merge the occurrences of the specified terms, i.e. the terms will not be deleted from your vocabulary.'),
    );

    $form['merge_fields'] = array(
      '#type' => 'checkbox',
      '#title' => t('Merge Term Fields'),
      '#description' => t('Whether to the values of term trunk should be added the values of corresponding fields of term branch. The values will be added until the cardinality limit for each field is reached.'),
    );

    if (module_exists('redirect')) {
      $options = array(TERM_MERGE_NO_REDIRECT => 'No redirect') + array(
        0 => t('Default (@default)',
        array('@default' => variable_get('redirect_default_status_code', 301))),
      ) + redirect_status_code_options();
      $form['redirect'] = array(
        // We respect access rights defined in redirect.module here.
        '#access' => user_access('administer redirects'),
        '#type' => 'select',
        '#title' => t('Create Redirect'),
        '#description' => t('If you want to create an HTTP redirect from your branch terms to the trunk term, please, choose the HTTP redirect code here.'),
        '#required' => TRUE,
        '#options' => $options,
        '#default_value' => TERM_MERGE_NO_REDIRECT,
      );
    }
    else {
      $form['redirect'] = array(
        '#markup' => t('Enable the module <a href="http://drupal.org/project/redirect">Redirect</a> if you want to do an HTTP redirect from your term branch to the term trunk.'),
      );
    }

    $form['step'] = array(
      '#type' => 'textfield',
      '#title' => t('Step'),
      '#description' => t('Please, specify how many terms to process per script run in batch. If you are hitting time or memory limits in your PHP, decrease this number.'),
      '#default_value' => 40,
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $form['actions'] = array(
      '#type' => 'actions',
    );

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }
  else {
    // We are at the confirmation step.
    $count = count($form_state['values']['term_branch']);
    $question = format_plural($count, 'Are you sure want to merge 1 term?', 'Are you sure want to merge @count terms?');
    $form = confirm_form($form, $question, 'admin/structure/taxonomy/' . $vocabulary->machine_name);
  }

  return $form;
}

/**
 * Supportive function.
 *
 * Validate the term_merge_form(). Make sure term trunk is not among the
 * selected term branches or their children.
 */
function term_merge_form_validate($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    // We only validate the 1st step of the form.
    $prohibited_trunks = array();
    foreach ($form_state['values']['term_branch'] as $term_branch) {
      $children = taxonomy_get_tree($form['#vocabulary']->vid, $term_branch);
      $prohibited_trunks[] = $term_branch;
      foreach ($children as $child) {
        $prohibited_trunks[] = $child->tid;
      }
    }
    if (in_array($form_state['values']['term_trunk']['tid'], $prohibited_trunks)) {
      form_error($form['term_trunk']['tid'], t('Trunk term cannot be on of the selected branch terms or their children.'));
    }
  }
}

/**
 * Submit handler for term_merge_form(). Merge terms one into another.
 */
function term_merge_form_submit($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    // Since merging terms is an important operation, we better confirm user
    // really wants to do this.
    $form_state['storage']['confirm'] = 0;
    $form_state['rebuild'] = TRUE;
    // Before storing the submitted values we slightly preprocess them to make
    // sure they correspond to what is expected by submit handler of taxonomy
    // creation form.
    if (isset($form_state['values']['relations'])) {
      $form_state['values'] += $form_state['values']['relations'];
    }
    $form_state['storage']['info'] = $form_state['values'];
    $form_state['storage']['old_form'] = $form;
  }
  else {
    // The user has confirmed merging. We pull up the submitted values.
    $form_state['values'] = $form_state['storage']['info'];

    // If necessary, create the term trunk.
    if ($form_state['values']['term_trunk']['tid'] == TERM_MERGE_NEW_TERM_TRUNK) {
      // We try to mimic normal form submission for taxonomy module.
      module_load_include('inc', 'taxonomy', 'taxonomy.admin');
      taxonomy_form_term_submit($form_state['storage']['old_form']['term_trunk']['term_create'], $form_state);
      $term_trunk = $form_state['term'];
    }
    else {
      $term_trunk = taxonomy_term_load($form_state['values']['term_trunk']['tid']);
    }

    $redirect = isset($form_state['values']['redirect']) ? $form_state['values']['redirect'] : TERM_MERGE_NO_REDIRECT;
    term_merge(array_values($form_state['values']['term_branch']), $term_trunk->tid, (bool) $form_state['values']['term_branch_keep'], (bool) $form_state['values']['merge_fields'], $redirect, (int) $form_state['values']['step']);

    $form_state['redirect'] = array('admin/structure/taxonomy/' . $term_trunk->vocabulary_machine_name);
  }
}

/**
 * Supportive function.
 *
 * Generate form elements for select widget for term trunk element of the
 * term_merge_form().
 *
 * @param object $vocabulary
 *   Fully loaded taxonomy vocabulary object
 */
function term_merge_form_term_trunk_widget_select(&$form, &$form_state, $vocabulary) {
  $tree = taxonomy_get_tree($vocabulary->vid);
  $options = array();
  foreach ($tree as $k => $v) {
    $options[$v->tid] = str_repeat('-', $v->depth) . $v->name;
    // Additionally we key the $tree by term->tid.
    unset($tree[$k]);
    $tree[$v->tid] = $v;
  }

  $term_branch_value = array();
  // Firstly trying to look up selected term branches in the default value of
  // term branch form element.
  if (isset($form['term_branch']['#default_value']) && is_array($form['term_branch']['#default_value'])) {
    $term_branch_value = $form['term_branch']['#default_value'];
  }
  if (isset($form_state['values']['term_branch']) && is_array($form_state['values']['term_branch'])) {
    $term_branch_value = $form_state['values']['term_branch'];
  }

  if (!empty($term_branch_value)) {
    // We have to make sure among term_trunk there is no term_branch or any of
    // their children.
    foreach ($term_branch_value as $v) {
      unset($options[$v]);
      foreach (taxonomy_get_tree($vocabulary->vid, $v) as $child) {
        unset($options[$child->tid]);
      }
    }
    $options = array(TERM_MERGE_NEW_TERM_TRUNK => 'New Term') + $options;
  }
  else {
    // Term branch has not been selected yet.
    $options = array();
  }

  $form['term_trunk']['tid'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#description' => t('Please, choose into what term you want to merge.'),
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'term_merge_form_term_trunk_term_create',
      'wrapper' => 'term-merge-form-term-trunk-term-create',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['term_trunk']['term_create'] = array(
    '#prefix' => '<div id="term-merge-form-term-trunk-term-create">',
    '#suffix' => '</div>',
  );
  // We throw in the Taxonomy native term create form only if the option for
  // creation of a new term was selected by user.
  if (isset($form_state['values']['term_trunk']['tid']) && $form_state['values']['term_trunk']['tid'] == TERM_MERGE_NEW_TERM_TRUNK) {
    module_load_include('inc', 'taxonomy', 'taxonomy.admin');

    $form['term_trunk']['term_create'] += array(
      '#type' => 'fieldset',
      '#title' => t('Create New Term'),
    );

    $form['term_trunk']['term_create'] += taxonomy_form_term($form['term_trunk']['term_create'], $form_state, array(), $vocabulary);
    // We have our own submit button, so we unset the normal one from the term
    // create form.
    unset($form['term_trunk']['term_create']['actions']);
    // Additionally we have to filter out from "Parent Terms" select the already
    // selected branch terms and their children, because we can't merge into
    // the term itself or its children.
    // We do a trick here, since we know the 1st element is the <root> option
    // and all others are normal taxonomy terms, we keep the 1st element as it
    // is while all the other elements we substitute with our $options array
    // which is basically identical but already has filtered out unwanted terms.
    // Plus we have to unset the 'New Term' option from $options.
    unset($options[TERM_MERGE_NEW_TERM_TRUNK]);
    $form['term_trunk']['term_create']['relations']['parent']['#options'] = array_slice($form['term_trunk']['term_create']['relations']['parent']['#options'], 0, 1, TRUE) + $options;

    // For each field attached to taxonomy term of this vocabualry that has
    // unlimited cardinality we have to extra process the results, otherwise
    // "Add another item" button doesn't work.
    $instances = field_info_instances($form['term_trunk']['term_create']['#entity_type'], $form['term_trunk']['term_create']['#bundle']);
    foreach ($instances as $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
        if (isset($form['term_trunk']['term_create'][$field['field_name']][LANGUAGE_NONE]['add_more']['#limit_validation_errors'])) {
          $form['term_trunk']['term_create'][$field['field_name']][LANGUAGE_NONE]['add_more']['#limit_validation_errors'] = array(array('term_branch'), array('term_trunk'));
        }
      }
    }
  }
}

/**
 * Supportive function.
 *
 * Generate form elements for autocomplete widget for term trunk element of the
 * term_merge_form().
 *
 * @param object $vocabulary
 *   Fully loaded taxonomy vocabulary object
 */
function term_merge_form_term_trunk_widget_autocomplete(&$form, &$form_state, $vocabulary) {
  $form['term_trunk']['tid'] = array(
    '#type' => 'textfield',
    '#description' => t("Start typing in a term's name in order to get some suggestions."),
    '#required' => TRUE,
    '#autocomplete_path' => 'term-merge/autocomplete/term-trunk/' . $vocabulary->machine_name,
    '#element_validate' => array('term_merge_form_trunk_term_widget_autocomplete_validate'),
  );
}

/**
 * Supportive function.
 *
 * Validate form element of the autocomplete widget of term trunk element of
 * the form term_merge_form(). Make sure the enetered string is a name of one of
 * the existing terms in the vocabulary where the merge occurs. If term is found
 * the function substitutes the name with its {taxonomy_term_data}.tid as it
 * what is expected from a term trunk widget to provide in its value.
 */
function term_merge_form_trunk_term_widget_autocomplete_validate($element, &$form_state, $form) {
  $term = taxonomy_get_term_by_name($element['#value'], $form['#vocabulary']->machine_name);
  if (!is_array($term) || empty($term)) {
    // Seems like the user has entered a non existing name in the autocomplete
    // textfield.
    form_error($element, t('There are no terms with name %name in the %vocabulary vocabulary.', array(
      '%name' => $element['#value'],
      '%vocabulary' => $form['#vocabulary']->name,
    )));
  }
  else {
    // We have to substitute the term's name with its tid in order to make this
    // widget unified with the interface.
    $term = array_pop($term);
    form_set_value($element, $term->tid, $form_state);
  }
}

/**
 * Menu page callback function.
 *
 * Autocomplete callback function for the trunk term form element in the widget
 *   of autocomplete. The code of this function was mainly copy-pasted from
 *   Taxonomy autocomplete widget menu callback function.
 *
 * @param object $vocabulary
 *   Fully loaded vocabulary object inside of which the terms are about to be
 *     merged
 */
function term_merge_form_term_trunk_widget_autocomplete_autocomplete($vocabulary) {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $tags_typed.
  $args = func_get_args();
  // Shift off the $vocabulary argument.
  array_shift($args);
  $tags_typed = implode('/', $args);

  // Querying database for suggestions.
  $query = db_select('taxonomy_term_data', 't');
  $tags_return = $query->addTag('translatable')
    ->addTag('term_access')
    ->fields('t', array('tid', 'name'))
    ->condition('t.vid', $vocabulary->vid)
    ->condition('t.name', '%' . db_like($tags_typed) . '%', 'LIKE')
    ->range(0, 10)
    ->execute()
    ->fetchAllKeyed();

  $term_matches = array();
  foreach ($tags_return as $name) {
    $n = $name;
    // Term names containing commas or quotes must be wrapped in quotes.
    if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
      $n = '"' . str_replace('"', '""', $name) . '"';
    }
    $term_matches[$n] = check_plain($name);
  }

  drupal_json_output($term_matches);
}

/**
 * Ajax callback function.
 *
 * Used in term_merge_term_merge_form() to replace the term_trunk element
 *   depending on already selected term_branch values.
 */
function term_merge_form_term_trunk($form, $form_state) {
  return $form['term_trunk'];
}

/**
 * Ajax callback function.
 *
 * Used in term_merge_term_merge_form() to replace the term create fieldset
 *   depending on already selected term_branch values and the term_trunk value.
 */
function term_merge_form_term_trunk_term_create($form, $form_state) {
  return $form['term_trunk']['term_create'];
}

/**
 * Merge terms one into another using batch API.
 *
 * @param array $term_branch
 *   A single term tid or an array of term tids to be merged, aka term branches
 * @param int $term_trunk
 *   The tid of the term to merge term branches into, aka term trunk
 * @param bool $term_branch_keep
 *   Whether the term branches should not be deleted, also known as "merge only
 *     occurrences" option
 * @param bool $merge_fields
 *   Whether the fields from branch terms should be merged into the fields of
 *     term trunk (until each field's cardinality limit is reached)
 * @param int $redirect
 *   HTTP code for redirect from $term_branch to $term_trunk, 0 stands for the
 *     default redirect defined in Redirect module. Use constant
 *     TERM_MERGE_NO_REDIRECT to denote not creating any HTTP redirect.
 *     Note: this parameter requires Redirect module enabled, otherwise it will
 *     be disgarded
 * @param int $step
 *   How many term branches to merge per script run in batch. If you are hitting
 *     time or memory limits, decrease this parameter
 */
function term_merge($term_branch, $term_trunk, $term_branch_keep = FALSE, $merge_fields = TRUE, $redirect = TERM_MERGE_NO_REDIRECT, $step = 40) {
  // Create an array of sources if it isn't yet.
  if (!is_array($term_branch)) {
    $term_branch = array($term_branch);
  }

  // Creating a skeleton for the merging batch.
  $batch = array(
    'title' => t('Merging terms'),
    'operations' => array(
      array('term_merge_batch_process', array(
        $term_branch,
        $term_trunk,
        $term_branch_keep,
        $merge_fields,
        $redirect,
        $step,
      )),
    ),
    'finished' => 'term_merge_batch_finished',
  );

  // Initialize the batch process.
  batch_set($batch);
}

/**
 * Process batch function.
 *
 * Triggers action 'term_merge_action' on each pair of term branch:term trunk.
 *
 * @param array $term_branch
 *   An array of term tids to be merged, aka term branches
 * @param int $term_trunk
 *   The tid of the term to merge term branches into, aka term trunk
 * @param bool $term_branch_keep
 *   Whether the term branches should be kept in vocabulary after updating
 *     all taxonomy term reference fields
 * @param bool $merge_fields
 *   Whether to the values of term trunk should be added values of
 *     corresponding fields of term branch. The values will be added until
 *     the cardinality limit for each field is reached.
 * @param int $redirect
 *   HTTP code for redirect from $term_branch to $term_trunk. 0 stands for the
 *     default redirect defined in Redirect module. Use TERM_MERGE_NO_REDIRECT
 *     to denote not creating HTTP redirect. Note: this setting requires
 *     Redirect module
 * @param int $step
 *   How many term branches to process per script run in batch. If you are
 *     hitting time or memory limits, decrease this parameter
 * @param array $context
 *   Drupal Batch API context array
 */
function term_merge_batch_process($term_branch, $term_trunk, $term_branch_keep, $merge_fields, $redirect, $step, &$context) {
  // Initializing sandbox.
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['current'] = 0;
  }

  $total = count($term_branch);
  // To speed up the process we take advantage of taxonomy_term_load_multiple()
  // instead of just repeating calls to taxonomy_term_load().
  $till = min($total, $context['sandbox']['current'] + $step);
  $length = $till - $context['sandbox']['current'];
  array_slice($term_branch, $context['sandbox']['current'], $length);
  $term_branch = array_values(taxonomy_term_load_multiple($term_branch));
  for ($i = 0; $i < $step && $context['sandbox']['current'] < $total; $i++) {
    actions_do('term_merge_action', $term_branch[$i], array(
      'term_trunk' => $term_trunk,
      'term_branch_keep' => $term_branch_keep,
      'merge_fields' => $merge_fields,
      'redirect' => $redirect,
    ));
    $context['sandbox']['current']++;
  }

  if ($context['sandbox']['current'] != $total) {
    $context['finished'] = $context['sandbox']['current'] / $total;
    $term = $term_branch[$i - 1];
    $context['message'] = t('Merged up to @term', array('@term' => $term->name));
  }
}

/**
 * Batch 'finished' callback.
 *
 * Processes results of Term Merge batch.
 */
function term_merge_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The terms have been successfully merged.'));
  }
  else {
    // An error happened. We have to notify the user.
    drupal_set_message(t('An error occurred. We are sorry, please, report this error to the maintainers of Term Merge module.'), 'error');
  }
}
